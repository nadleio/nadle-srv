scalar Upload

# Models
type User {
  id: ID!
  firstName: String
  lastName: String
  username: String
  email: String!
  avatar: String
  biography: String
  link: String
  latitude: Float
  longitude: Float
  buckets: [Bucket!]!
  posts: [Post!]!
  followers(limit: Int, offset: Int): Follows
  following(limit: Int, offset: Int): Follows
  files(limit: Int, offset: Int): Files
  hashtags: [HashTag]
}

type File {
  id: ID!
  owner: User!
  url: String!
  fileName: String!
  mimetype: String!
  encoding: String
}

type AuthPayload {
  token: String!
  user: User!
}

type Follows implements Paging {
  count: Int
  pages: Int
  results: [User!]!
}

type Files implements Paging {
  count: Int
  pages: Int
  results: [File!]!
}

# Queries
type Query {
  getSelf: TransactionStatusUser!
}

# Mutations
type Mutation {
  signup(
    email: String!
    username: String
    password: String!
  ): TransactionStatusEvent
  login(identifier: String!, password: String!): TransactionStatusAuth
  verify(token: String!): TransactionStatusEvent
  forgotPassword(email: String!): TransactionStatusEvent
  changePassword(token: String!, newPassword: String!): TransactionStatusEvent
  changePasswordAuth(
    oldPassword: String!
    newPassword: String!
  ): TransactionStatusEvent
  createBucket(
    parent: String
    title: String!
    description: String
    privateBucket: Boolean
  ): TransactionStatusBucket
  followUser(id: String): TransactionStatusUser
  unFollowUser(id: String): TransactionStatusUser
  changeAvatar(file: Upload!): TransactionStatusUser
  removeAvatar: TransactionStatusUser
  uploadFile(file: Upload!): TransactionStatusFile
  updateInfo(
    firstName: String
    lastName: String
    biography: String
    link: String
    latitude: Float
    longitude: Float
  ): TransactionStatusUser
  createPost(
    body: String
    title: String
    coverPostUrl: String
    organizationId: Int
  ): TransactionStatusUser
  followTag(hashTag: String) : TransactionStatusHashTags
  unfollowTag(hashTag: String) : TransactionStatusHashTags
}

# Responses
type TransactionStatusEvent implements TransactionStatus {
  message: String!
  success: Boolean!
  errorCode: String
  data: String
}

type TransactionStatusFile implements TransactionStatus {
  message: String!
  success: Boolean!
  errorCode: String
  data: File
}

type TransactionStatusBucket implements TransactionStatus {
  message: String!
  success: Boolean!
  errorCode: String
  data: Bucket
}

type TransactionStatusUser implements TransactionStatus {
  message: String!
  success: Boolean!
  errorCode: String
  data: User!
}

type TransactionStatusAuth implements TransactionStatus {
  message: String!
  success: Boolean!
  errorCode: String
  data: AuthPayload
}

type TransactionStatusPost implements TransactionStatus {
  message: String!
  success: Boolean!
  errorCode: String
  data: User!
}

type TransactionStatusHashTags implements TransactionStatus {
  message: String!
  success: Boolean!
  errorCode: String
  data: [HashTag]
}